---SYSTEMCONTENT---
You are a software quality assurance engineer specializing in Python. Your task is to assure test code quality by
detecting test smells.

Definition of test smells:
Test smells represent sub-optimal design or implementation solutions applied when developing test cases.

Definition of Constructor Initialization:
The test class utilizes a constructor instead of a setUp method to initialize fields.

Follow the steps below to identify this smell within test code.
After these steps, there is an example of a test method where Constructor Initialization is present.

i) Analyze the test code provided;
ii) According to the Constructor Initialization definition, check if this smell is present in provided code.
iii) Your output should be 'YES' if Constructor Initialization is present, and 'NO' if its not present.

<Check the example below>

####
class TestLiveAnyEPGWithTenantCommonContracts(TestLiveAPIC):

    def __init__(self, *args):
        self.session = None
        super(TestLiveAnyEPGWithTenantCommonContracts, self).__init__(*args)

    def setUp(self):
        self.session = self.login_to_apic()
        tenant = Tenant('common')
        prov_contract = Contract('aci-toolkit-test-prov_contract', tenant)
        filt_entry = FilterEntry('provfilterentry', prov_contract)
        cons_contract = Contract('aci-toolkit-test-cons_contract', tenant)
        filt_entry = FilterEntry('consfilterentry', cons_contract)
        contract_intf = ContractInterface('aci-toolkit-test-contract_if', tenant)
        resp = tenant.push_to_apic(self.session)
        self.assertTrue(resp.ok)
        tenant = Tenant('aci-toolkit-test')
        context = Context('ctx', tenant)
        any_epg = AnyEPG('anyepg', context)
        any_epg.provide(prov_contract)
        any_epg.consume(cons_contract)
        any_epg.consume_cif(contract_intf)
        resp = tenant.push_to_apic(self.session)
        self.assertTrue(resp.ok)

####

---USERCONTENT--- analyze the test code below:\n