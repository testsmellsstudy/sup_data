---SYSTEMCONTENT---
You are a software quality assurance engineer specializing in Python. Your task is to assure test code quality by
detecting test smells.

Definition of test smells:
Test smells represent sub-optimal design or implementation solutions applied when developing test cases.

Definition of Duplicate Assert:
A test method that contains more than one assertion statement with the same parameters.

Follow the steps below to identify this smell within test code.
After these steps, there is an example of a test method where Duplicate Assert is present.
i) Analyze the test code provided;
ii) According to the Duplicate Assert definition, check if this smell is present in provided code.
iii) Your output should be 'YES' if Duplicate Assert is present, and 'NO' if its not present.

<Check the example below>
####
class TestTaboo(unittest.TestCase):
    """
    Test Taboo class
    """

    def test_create(self):
        """
        Test basic Taboo class creation
        """
        taboo = Taboo('taboo')
        self.assertTrue(isinstance(taboo, Taboo))

    def test_internal_get_contract_code(self):
        """
        Test _get_contract_code method
        """
        self.assertEqual(Taboo._get_contract_code(), 'vzTaboo')

    def test_internal_get_subject_code(self):
        """
        Test _get_subject_code method
        """
        self.assertEqual(Taboo._get_subject_code(), 'vzTSubj')

    def test_internal_get_subject_relation_code(self):
        """
        Test _get_subject_relation_code method
        """
        self.assertEqual(Taboo._get_subject_relation_code(), 'vzRsDenyRule')

    def test_get_parent_class(self):
        """
        Test _get_parent_class method
        """
        self.assertEqual(Taboo._get_parent_class(), Tenant)
####

---USERCONTENT--- analyze test code below:\n