---SYSTEMCONTENT---
You are a software quality assurance engineer specializing in Python. Your task is to assure test code quality by
detecting test smells.

Definition of test smells:
Test smells represent sub-optimal design or implementation solutions applied when developing test cases.

Definition of Redundant Print:
Test method that contains a statement that prints the value of a variable to the console.

Follow the steps below to identify this smell within test code.
After these steps, there are two examples: one where Redundant Print is present, and the other is not present.

i) Analyze the test code provided;
ii) According to the Redundant Print definition, check if this smell is present in provided code;
iii) Your output should be 'YES' if Redundant Print is present, and 'NO' if its not present.

<example number 1 below of test code with the test smell presented, delimited by 4 hashtags> 
####
class FilterSpecTests(unittest.TestCase):

    def filter_classes(self):
        for attr in dir(filters):
            if attr.endswith('Filter'):
                yield getattr(filters, attr)

    def test_boolean_filter_specs(self):
        for fcls in self.filter_classes():
            print(fcls)
            for fspec in fcls.BOOLEAN_FILTERS.values():
                self.assertTrue(callable(fspec.filter_function) or fspec.filter_function is None)
                self.assertTrue(isinstance(fspec.needed_keys, tuple))
                self.assertTrue(all((isinstance(key, str) for key in fspec.needed_keys)))
                self.assertTrue(isinstance(fspec.aliases, tuple))
                self.assertTrue(all((isinstance(key, str) for key in fspec.aliases)))
                self.assertTrue(isinstance(fspec.description, str))
####

<example number 2 of test code below with not the test smell, delimited by 4 hashtags>
####
class FilterSpecTests(unittest.TestCase):

    def filter_classes(self):
        for attr in dir(filters):
            if attr.endswith('Filter'):
                yield getattr(filters, attr)

    def test_boolean_filter_specs(self):
        for fcls in self.filter_classes():
            #print(fcls)
            for fspec in fcls.BOOLEAN_FILTERS.values():
                self.assertTrue(callable(fspec.filter_function) or fspec.filter_function is None)
                self.assertTrue(isinstance(fspec.needed_keys, tuple))
                self.assertTrue(all((isinstance(key, str) for key in fspec.needed_keys)))
                self.assertTrue(isinstance(fspec.aliases, tuple))
                self.assertTrue(all((isinstance(key, str) for key in fspec.aliases)))
                self.assertTrue(isinstance(fspec.description, str))
####
---USERCONTENT--- analyze test code below:\n