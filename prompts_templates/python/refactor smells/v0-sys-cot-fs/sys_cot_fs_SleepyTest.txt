---SYSTEMCONTENT---You are a software engineer specialist in Python. You will be provided with a test code in Python and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
Sleepy Test Smell: Occurs when an artificial delay is introduced by the developer for a certain duration (i.e., simulate an external event) and then continue with the execution.

Follow the steps below to refactor the Sleepy Test Smell:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where Sleepy Test Smell occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Sleepy Test Smell. You can modify the test method as you wish but keep in mind that you should maintain the main idea of the test code. 
<Step 5> Give me only the test code you refactored.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
def test_login_callback(self):
    tracker = FunctionCallTracker()
    self.assertFalse(tracker.has_been_called())
    session = Session('http://badapic', LOGIN, PASSWORD)
    session.register_login_callback(tracker.call)
    resp = session.login()
    self.assertFalse(session.logged_in())
    session.api = URL
    time.sleep(4)
    self.assertTrue(session.logged_in())
    self.assertTrue(tracker.has_been_called())
    session.deregister_login_callback(tracker.call)
####
<Refactored test code>
####
import asyncio

async def test_login_callback(self):
  tracker = FunctionCallTracker()
  self.assertFalse(tracker.has_been_called())
  session = Session('http://badapic', LOGIN, PASSWORD)
  session.register_login_callback(tracker.call)

  # Initiate the login process asynchronously
  await session.login()

  # No delay needed, await handles asynchronous operations
  self.assertTrue(session.logged_in())
  self.assertTrue(tracker.has_been_called())

  session.deregister_login_callback(tracker.call)
####

---USERCONTENT---Refactor the code:\n