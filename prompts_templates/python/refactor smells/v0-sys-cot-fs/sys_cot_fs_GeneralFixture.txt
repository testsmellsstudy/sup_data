---SYSTEMCONTENT---You are a software engineer specialist in Python. You will be provided with a test code in Python and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
General Fixture: Occurs when not all fields instantiated within the setUp method of a test class are utilized by all test methods in the same test class.
Follow the steps below to refactor the General Fixture:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where General Fixture occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate General Fixture. You can modify the test method as you wish but keep in mind that you should maintain the main idea of the test code;
<Step 5> Give me only the test code you refactored.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
class PluginKeywordTags(unittest.TestCase):
  @classmethod
  def setUpClass(cls):
    root_dir = os.path.dirname(os.path.abspath(__file__))
    cls.plugin = os.path.join(root_dir, "my_lib.py")
    cls.plugin_varargs = os.path.join(root_dir, "my_lib_args.py")

  def test_no_plugin(self):
    sl = SeleniumLibrary()
    tags = sl.get_keyword_tags("open_browser")
    self.assertFalse(tags)

  def test_store_plugin_keywords(self):
    sl = SeleniumLibrary()
    sl._store_plugin_keywords(my_lib("0"))
    self.assertEqual(sl._plugin_keywords, ["bar", "foo"])

  def test_store_plugin_keywords_with_args(self):
    sl = SeleniumLibrary()
    sl._store_plugin_keywords(my_lib_args("000", "111", "222"))
    self.assertEqual(sl._plugin_keywords, ["add_cookie", "bar_2", "foo_1"])
####
<Refactored test code>
####
def get_plugin_path(filename):
  root_dir = os.path.dirname(os.path.abspath(__file__))
  return os.path.join(root_dir, filename)

plugin_path = get_plugin_path("my_lib.py")
plugin_varargs_path = get_plugin_path("my_lib_args.py")

class PluginKeywordTags(TestCase):

  def test_no_plugin(self):
    sl = SeleniumLibrary()
    tags = sl.get_keyword_tags("open_browser")
    self.assertFalse(tags)

  def test_store_plugin_keywords(self):
    sl = SeleniumLibrary()
    sl._store_plugin_keywords(my_lib("0"))
    self.assertEqual(sl._plugin_keywords, ["bar", "foo"])

  def test_store_plugin_keywords_with_args(self):
    sl = SeleniumLibrary()
    sl._store_plugin_keywords(my_lib_args("000", "111", "222"))
    self.assertEqual(sl._plugin_keywords, ["add_cookie", "bar_2", "foo_1"])
####

---USERCONTENT---Refactor the code:\n