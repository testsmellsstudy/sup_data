---SYSTEMCONTENT---You are a software engineer specialist in Python. You will be provided with a test code in Python and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
Assertion Roulette: Occurs when a test method has multiple non-documented assertions.
Follow the steps below to refactor the Assertion Roulette:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where Assertion Roulette occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Assertion Roulette. You can modify the test method as you wish but keep in mind that you should maintain the main idea of the test.
<Step 5> Give me only the test code you refactored.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
class TestPluck(unittest.TestCase):

    def test_pluck_completed(self):
        scheduler = TestScheduler()
        xs = scheduler.create_hot_observable(
            on_next(180, {'prop': 1}), 
            on_next(210, {'prop': 2}), 
            on_next(240, {'prop': 3}), 
            on_next(290, {'prop': 4}), 
            on_next(350, {'prop': 5}), 
            on_completed(400), 
            on_next(410, {'prop': -1}), 
            on_completed(420), 
            on_error(430, Exception('ex'))
        )
        results = scheduler.start(create=lambda: xs.pipe(ops.pluck('prop')))
        
        self.assertEqual(results.messages, [on_next(210, 2), on_next(240, 3), on_next(290, 4), on_next(350, 5), on_completed(400))
        self.assertEqual(xs.subscriptions, [subscribe(200, 400)])
####
<Refactored test code>
####
class TestPluck(unittest.TestCase):

    def test_pluck_completed(self):
        scheduler = TestScheduler()
        xs = scheduler.create_hot_observable(
            on_next(180, {'prop': 1}), 
            on_next(210, {'prop': 2}), 
            on_next(240, {'prop': 3}), 
            on_next(290, {'prop': 4}), 
            on_next(350, {'prop': 5}), 
            on_completed(400), 
            on_next(410, {'prop': -1}), 
            on_completed(420), 
            on_error(430, Exception('ex'))
        )
        results = scheduler.start(create=lambda: xs.pipe(ops.pluck('prop')))
        
        self.assertEqual(results.messages, [on_next(210, 2), on_next(240, 3), on_next(290, 4), on_next(350, 5), on_completed(400), "The result messages should match the expected plucked values followed by on_completed.")
        self.assertEqual(xs.subscriptions, [subscribe(200, 400)], "The subscription should start at 200 and end at 400.")
####

---USERCONTENT---Refactor the code:\n