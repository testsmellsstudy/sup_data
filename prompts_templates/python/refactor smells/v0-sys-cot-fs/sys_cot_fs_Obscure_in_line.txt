---SYSTEMCONTENT---You are a software engineer specialist in Python. You will be provided with a test code in Python and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
Obscure In-Line Setup: This smell occurs when test case contains too many setup steps.
Follow the steps below to refactor the Obscure In-Line Setup:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where Obscure In-Line Setup occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Obscure In-Line Setup. You can modify the test methods as you wish but keep in mind that you should maintain the main idea of the test code. 
<Step 5> Give me only the test code you refactored.


An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
class TestCalvinScript(CalvinTestBase):

    def testDestroyAppWithMigratedActors(self):
        rt, rt1, rt2 = get_runtime(3)

        script = """
      src : std.CountTimer()
      snk : test.Sink(store_tokens=1, quiet=1)
      src.integer > snk.token"""

        app_info, errors, warnings = self.compile_script(script, "simple")
        d = deployer.Deployer(rt, app_info)
        deploy_app(d)
        app_id = d.app_id

        src = d.actor_map['simple:src']
        snk = d.actor_map['simple:snk']

        self.migrate(rt, rt1, snk)
        self.migrate(rt, rt2, src)

        applications = request_handler.get_applications(rt)
        assert app_id in applications

####
<Refactored test code>
####
class TestCalvinScript(CalvinTestBase):

    def setup_method(self):
        self.rt, self.rt1, self.rt2 = get_runtime(3)
        self.script = """
      src : std.CountTimer()
      snk : test.Sink(store_tokens=1, quiet=1)
      src.integer > snk.token
    """
        self.app_info, errors, warnings = self.compile_script(script, "simple")
        d = deployer.Deployer(self.rt, app_info)
        deploy_app(d)
        self.app_id = d.app_id
        self.scr = d.actor_map['simple:src']
        self.snk = d.actor_map['simple:snk']

    def teardown_method(self):
        helpers.destroy_app(d)
        del self.app_id
        del self.rt
        del self.rt1
        del self.rt2
        del self.scr
        del self.snk

    def testDestroyAppWithMigratedActors(self):
        self.migrate(self.rt, self.rt1, self.snk)
        self.migrate(self.rt, self.rt2, self.src)
        applications = request_handler.get_appiclations(self.rt)

        assert self.app_id in applications      
####

---USERCONTENT---Refactor the code:\n