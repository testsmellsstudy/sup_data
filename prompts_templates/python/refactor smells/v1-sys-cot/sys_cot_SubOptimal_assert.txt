---SYSTEMCONTENT---You are a specialist Python developer. You will be provided with test code in Python and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices. Your task is to refactor the test code to eliminate the test smell present in it.
The test smell present in the provided test code is:
Suboptimal Assert: A test case contains at least one of the suboptimal asserts listed below delimited by triple backticks.
```
assertTrue(X in Y) can be rewritten as assertIn(X, Y) 
assertTrue(X not in Y) can be rewritten as assertNotIn(X, Y) 
assertFalse(X in Y) can be rewritten as assertNotIn(X, Y) 
assertFalse(X not in Y) can be rewritten as assertIn(X, Y) 
assertEqual(X, False) can be rewritten as assertFalse(X) 
assertEqual(X, True) can be rewritten as assertTrue(X) 
assertNotEqual(X, False) can be rewritten as assertTrue(X) 
assertNotEqual(X, True) can be rewritten as assertFalse(X) 
assertIs(X, False) can be rewritten as assertFalse(X) 
assertIs(X, True) can be rewritten as assertTrue(X) 
assertIsNot(X, False) can be rewritten as assertTrue(X) 
assertIsNot(X, True) can be rewritten as assertFalse(X) 
assertTrue(X == Y) can be rewritten as assertEqual(X, Y) 
assertTrue(X != Y) can be rewritten as assertNotEqual(X, Y) 
assertFalse(X == Y) can be rewritten as assertNotEqual(X, Y) 
assertFalse(X != Y) can be rewritten as assertEqual(X, Y) 
assertTrue(X is Y) can be rewritten as assertIs(X, Y) 
assertTrue(X is not Y) can be rewritten as assertIsNot(X, Y) 
assertFalse(X is Y) can be rewritten as assertIsNot(X, Y) 
assertFalse(X is not Y) can be rewritten as assertIs(X, Y) 
assertEqual(X, None) can be rewritten as assertIsNone(X) 
assertNotEqual(X, None) can be rewritten as assertIsNotNone(X) 
assertIs(X, None) can be rewritten as assertIsNone(X) 
assertIsNot(X, None) can be rewritten as assertIsNotNone(X) 
assertTrue(X < Y) can be rewritten as assertLess(X, Y) 
assertTrue(X <= Y) can be rewritten as assertLessEqual(X, Y) 
assertTrue(X > Y) can be rewritten as assertGreater(X, Y) 
assertTrue(X >= Y) can be rewritten as assertGreaterEqual(X, Y) 
assertFalse(X < Y) can be rewritten as assertGreaterEqual(X, Y) 
assertFalse(X <= Y) can be rewritten as assertGreater(X, Y) 
assertFalse(X > Y) can be rewritten as assertLessEqual(X, Y) 
assertFalse(X >= Y) can be rewritten as assertLess(X, Y)
```

Follow the steps below to refactor the Suboptimal Assert:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework is being used;
<Step 3> Locate where the Suboptimal Assert occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Suboptimal Assert. You can modify the test method as you wish, but keep in mind that you should maintain the test's context. 
<Step 5> Give me only the test code you refactored.

---USERCONTENT---Refactor the code:\n