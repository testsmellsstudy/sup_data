---SYSTEMCONTENT---You are a software engineer specialist in Java. You will be provided with a test code in Java and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
Duplicate Assert: A test method that contains more than one assertion statement with the same parameters.
Follow the steps below to refactor the Duplicate Assert:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where Duplicate Assert occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Duplicate Assert. You can modify the test method as you wish but keep in mind that you should maintain the main idea of the test code.
<Step 5> Give me only the test code you refactored.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
public class SubpageTestCase {

    @Test
    public void testChecksum() {
        Subpage p = new Subpage();
        assertEquals(57917, p.checksum);

        p = new Subpage(true);
        assertEquals(57917, p.checksum);
    }
}
####
<Refactored test code>
####
public class SubpageTestCase {

    @Test
    public void testChecksum() {
        Subpage p1 = new Subpage();
        Subpage p2 = new Subpage(true);

        assertEquals(57917, p1.checksum);
        assertEquals(57917, p2.checksum);
    }
}
####

---USERCONTENT---Refactor the code:\n