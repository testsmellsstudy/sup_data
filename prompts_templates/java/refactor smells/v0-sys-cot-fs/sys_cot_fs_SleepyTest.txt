---SYSTEMCONTENT---You are a software engineer specialist in Java. You will be provided with a test code in Java and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
Sleepy Test Smell: Occurs when an artificial delay is introduced by the developer for a certain duration (i.e., simulate an external event) and then continue with the execution.

Follow the steps below to refactor the Sleepy Test Smell:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where Sleepy Test Smell occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Sleepy Test Smell. You can modify the test method as you wish but keep in mind that you should maintain the main idea of the test code. 
<Step 5> Give me only the test code you refactored.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
public void testEdictExternSearch() throws Exception {
    final Intent i = new Intent(getInstrumentation().getContext(), ResultActivity.class);
    i.setAction(ResultActivity.EDICT_ACTION_INTERCEPT);
    i.putExtra(ResultActivity.EDICT_INTENTKEY_KANJIS, "空白");
	tester.startActivity(i);
	assertTrue(tester.getText(R.id.textSelectedDictionary).contains("Default"));
	final ListView lv = getActivity().getListView();
	assertEquals(1, lv.getCount());
	DictEntry entry = (DictEntry) lv.getItemAtPosition(0);
	assertEquals("Searching", entry.english);
	Thread.sleep(500);
	final Intent i2 = getStartedActivityIntent();
	final List result = (List) i2.getSerializableExtra(ResultActivity.INTENTKEY_RESULT_LIST);
	entry = result.get(0);
	assertEquals("(adj-na,n,adj-no) blank space/vacuum/space/null (NUL)/(P)", entry.english);
	assertEquals("空白", entry.getJapanese());
	assertEquals("くうはく", entry.reading);
	assertEquals(1, result.size());
}
####
<Refactored test code>
####
public void testEdictExternSearch() throws Exception {
    final Intent i = new Intent(getInstrumentation().getContext(), ResultActivity.class);
    i.setAction(ResultActivity.EDICT_ACTION_INTERCEPT);
    i.putExtra(ResultActivity.EDICT_INTENTKEY_KANJIS, "空白");
    tester.startActivity(i);
    assertTrue(tester.getText(R.id.textSelectedDictionary).contains("Default"));

    // Create an IdlingResource that waits for the list view to have results
    final IdlingResource idlingResource = new MyCustomIdlingResource(lv);
    getInstrumentation().registerIdleResource(idlingResource);

    // Start the activity and wait for results to be loaded
    tester.startActivity(i);

    // Assertions on search results
    assertEquals(1, lv.getCount()); // Can potentially move this after idling
    DictEntry entry = (DictEntry) lv.getItemAtPosition(0);
    assertEquals("Searching", entry.english);

    final Intent i2 = getStartedActivityIntent();
    final List result = (List) i2.getSerializableExtra(ResultActivity.INTENTKEY_RESULT_LIST);
    entry = result.get(0);
    assertEquals("(adj-na,n,adj-no) blank space/vacuum/space/null (NUL)/(P)", entry.english);
    assertEquals("空白", entry.getJapanese());
    assertEquals("くうはく", entry.reading);
    assertEquals(1, result.size());

    getInstrumentation().unregisterIdleResource(idlingResource);
}

// Implement MyCustomIdlingResource to check for search completion logic
public class MyCustomIdlingResource implements IdlingResource {
    private final ListView listView;

    public MyCustomIdlingResource(ListView listView) {
        this.listView = listView;
    }

    @Override
    public boolean isIdleNow() {
        return listView.getCount() > 1; // Replace with your specific condition
    }

    @Override
    public void registerIdleTransitionCallback(IdlingResource.ResourceCallback callback) {
        // Implement logic to notify the callback when the condition is met
    }
}
####

---USERCONTENT---Refactor the code:\n