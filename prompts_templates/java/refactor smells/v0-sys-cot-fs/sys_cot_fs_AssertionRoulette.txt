---SYSTEMCONTENT---You are a software engineer specialist in Java. You will be provided with a test code in Java and a description of a test smell detected in this code. Test smells are patterns in test code that suggest poor design choices.
Your task is to refactor the test code in order to eliminate test smell present in the code. 
The test smell present in this test code provided is: 
Assertion Roulette: Occurs when a test method has multiple non-documented assertions.
Follow the steps below to refactor the Assertion Roulette:

<Step 1> Analyze the test code provided delimited by 4 hashtags;
<Step 2> Understand what this test code is testing, and which test framework its been used;
<Step 3> Locate where Assertion Roulette occurs;
<Step 4> Based on test framework used, refactor this part of the test code to eliminate Assertion Roulette. You can modify the test method as you wish but keep in mind that you should maintain the main idea of the test.
<Step 5> Give me only the test code you refactored.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
####
public class TestSwitch {
    @Test
    public void testNameChange() {
        CpSwitch spine1 = new CpSwitch("Spine1");
        CpSwitch leaf1 = new CpSwitch("Leaf1");
        
        String newName = "New_Name_2";
        
        CpLink link1 = new CpLink(spine1, "Eth1/3", leaf1, "Eth1/1");
        
        assertEquals("(Leaf1-Eth1/1,Spine1-Eth1/3)", link1.getName());  
        
        assertEquals("Spine1", spine1.getName());  
        
        spine1.setName(newName);
        
        
        assertEquals("(Leaf1-Eth1/1," + newName + "-Eth1/3)", link1.getName());  
        
        assertEquals(newName, spine1.getName()); 
    }
}
####
<Refactored test code>
####
public class TestSwitch {

    @Test
    public void testNameChange() {
        CpSwitch spine1 = new CpSwitch("Spine1");
        CpSwitch leaf1 = new CpSwitch("Leaf1");
        
        String newName = "New_Name_2";
        
        CpLink link1 = new CpLink(spine1, "Eth1/3", leaf1, "Eth1/1");
        
        assertEquals("(Leaf1-Eth1/1,Spine1-Eth1/3)", link1.getName(), "Link name should be correctly initialized");  
        
        assertEquals("Spine1", spine1.getName(), "Spine name should be correctly initialized");  
        
        spine1.setName(newName);
        
        
        assertEquals("(Leaf1-Eth1/1," + newName + "-Eth1/3)", link1.getName(), "Link name should be updated after spine name change");  
        
        assertEquals(newName, spine1.getName(), "Spine name should be updated");  // Ensures spine1 name change
    }
}####

---USERCONTENT---Refactor the code:\n