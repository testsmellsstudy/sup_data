---SYSTEMCONTENT---You are an expert Java developer. 

---USERCONTENT---
Let's start step by step. First, this test code has a test smell known as "Magic Number", which occurs when an assertion function contains a numeric literal as an argument. Second, I need a version of this code that keeps the same test's intention but mitigates this smell. 
One approach involves assigning a variable with this literal and replacing it in the assertion function.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
```
@Test
public void testGetLocalTimeAsCalendar() {
    Calendar localTime = calc.getLocalTimeAsCalendar(BigDecimal.valueOf(15.5D), Calendar.getInstance());
    assertEquals(15, localTime.get(Calendar.HOUR_OF_DAY));
    assertEquals(30, localTime.get(Calendar.MINUTE));
}
```
<Refactored test code>
####
@Test
public void testGetLocalTimeAsCalendar() {
    Calendar localTime = calc.getLocalTimeAsCalendar(BigDecimal.valueOf(15.5D), Calendar.getInstance());
    assert_hours = 15
    assert_minutes = 30
    assertEquals(assert_hours, localTime.get(Calendar.HOUR_OF_DAY));
    assertEquals(assert_minutes, localTime.get(Calendar.MINUTE));
}
```

Now provide the refactored test code for the code below, delimited by triple backticks.
Attention: Preserve all existing import statements in the Java code. You may introduce new packages as needed.

```
{test_code_with_smell_here}
```



