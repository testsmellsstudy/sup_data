---SYSTEMCONTENT---You are an expert Java developer. 

---USERCONTENT---
Let's start step by step. First, this test code contains a test smell known as "General Fixture", which occurs when not all fields instantiated within the setUp method of a test class are utilized by all test methods in the same test class. Second, I need a version of this code that keeps the same test's intention but mitigates this smell. 
One approach involves identifying which fixture is not being used by all test methods in the class and replacing this fixture from the setUp method for all methods to a setUp method exclusive to that specific test method.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
```
protected void setUp() throws Exception {
    assetManager = getInstrumentation().getContext().getAssets();
    certificateFactory = CertificateFactory.getInstance("X.509");

    infoDebianTestCA = loadCertificateInfo("DebianTestCA.pem");
    infoDebianTestNoCA = loadCertificateInfo("DebianTestNoCA.pem");
    infoGTECyberTrust = loadCertificateInfo("GTECyberTrustGlobalRoot.pem");

    // user-submitted test cases
	infoMehlMX = loadCertificateInfo("mehl.mx.pem");
}

public void testIsCA() {
    assertTrue(infoDebianTestCA.isCA());
    assertFalse(infoDebianTestNoCA.isCA());
    assertNull(infoGTECyberTrust.isCA());

    assertFalse(infoMehlMX.isCA());
}
```
<Refactored test code>
```
protected void setUp() throws Exception {
    //assetManager = getInstrumentation().getContext().getAssets();
    //certificateFactory = CertificateFactory.getInstance("X.509");

    infoDebianTestCA = loadCertificateInfo("DebianTestCA.pem");
    infoDebianTestNoCA = loadCertificateInfo("DebianTestNoCA.pem");
    infoGTECyberTrust = loadCertificateInfo("GTECyberTrustGlobalRoot.pem");

    // user-submitted test cases
    infoMehlMX = loadCertificateInfo("mehl.mx.pem");
}

public void testIsCA() {
    assertTrue(infoDebianTestCA.isCA());
    assertFalse(infoDebianTestNoCA.isCA());
    assertNull(infoGTECyberTrust.isCA());

    assertFalse(infoMehlMX.isCA());
}
```

Now provide the refactored test code for the code below, delimited by triple backticks.
Attention: Preserve all existing import statements in the Java code. You may introduce new packages as needed.

```
{test_code_with_smell_here}
```

